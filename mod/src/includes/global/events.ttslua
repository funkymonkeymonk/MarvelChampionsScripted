function onLoad()
    -- Create context Menus
    addContextMenuItem("Spawn Card", createUI)
end

function onObjectNumberTyped(object, playerColor, number)
    if (object.type ~= "Deck" and object.type ~= "Card") then
        return false
    end

    local nearbyObjects = findInRadiusBy(object.getPosition(), 4)
    local playmat = nil

    for _, obj in ipairs(nearbyObjects) do
        if obj.hasTag("playmat") then
            playmat = obj
            break
        end
    end

    if (playmat) then
        playmat.call("drawCards", {
            objectToDrawFrom = object,
            numberToDraw = number
        })
        
        return true
    end
end

function onObjectEnterZone(zone, card)
    if (supressZoneInteractions) then return end

    local zoneDef = getZoneDefinition({zone = zone})
    if (not zoneDef) then return end
    if (not isCard(card)) then return end
    if (not isFaceUp({object = card})) then return end

    local retainedValue = getCardValue({cardGuid = card.getGUID(), property = "retainedValue"})
    local onEnterFunction = zoneDef.onEnterFunction

    if (onEnterFunction) then
        scenarioManager.call(onEnterFunction, {
            zone = zone,
            item = card
        })
        return
    end

    local zoneType = zoneDef.zoneType or zoneDef.zoneIndex
    local zoneIndex = zoneDef.zoneIndex

    if (not zoneType) then
        return
    end

    local cardData = getCardData({
        card = card
    })

    local cardType = cardData.type
    if (cardType == "hero" or ((cardType == "villain" or cardType == "main_scheme") and zoneType ~= "victoryDisplay")) then
        return
    end

    local playerColor = zoneDef.playerColor
    if (playerColor) then
        setCardValue({cardGuid = card.getGUID(), property = "playerColor", value = playerColor})
    end

    if(zoneDef.rescaleOnEnterTo) then
        resizeCardOnEnterZone(card, zoneDef.rescaleOnEnterTo)
    end

    if(zoneDef.repositionCards) then
        positionCardOnEnterZone(card, zoneType, zoneIndex)
    end

    if(zoneDef.addCountersAndTokens) then
        addCountersAndTokensToCard({
            card = card,
            cardData = cardData
        })
    end

    local scenarioManager = getObjectFromGUID(GUID_SCENARIO_MANAGER)
    scenarioManager.call("onCardEnterZone", {
        zone = zone,
        card = card
    })

    if (zoneType == "victoryDisplay") then
        updateVictoryDisplayDetails()
    end    
    -- Wait.condition(function()
    --     if (card.isDestroyed()) then
    --         return
    --     end

    --     if (zoneType == "sideScheme") then
    --         addThreatCounterToSideScheme(card)
    --     elseif (zoneType == "minion") then
    --         addHealthCounterToMinion(card)
    --         if (card.hasTag("toughness")) then
    --             addStatusToMinion({
    --                 card = card,
    --                 statusType = "tough"
    --             })
    --         end
    --     end

    --     if (cardData.counter) then
    --         addConfiguredCounterToCard({card = card, cardData = cardData})
    --     end
    -- end, function()
    --     return card.isDestroyed() or card.resting
    -- end, 2)
end

function resizeCardOnEnterZone(card, scale)
    if (card.isDestroyed()) then return end
    if( not scale ) then return end

    card.setScale(scale)
end

function positionCardOnEnterZone(card, zoneType, zoneIndex)
    if (zoneType ~= "sideScheme" and zoneType ~= "attachment" and zoneType ~= "environment" and zoneType ~= "minion" and
        zoneType ~= "victoryDisplay") then
        return
    end

    local cardType = getCardProperty({
        card = card,
        property = "type"
    })
    local newCardPosition = getNewZoneCardPosition({
        zoneIndex = zoneIndex
    })
    local originalRotation = card.getRotation()
    local cardRotation = string.sub(cardType, -6, -1) == "scheme" and {0, 90, originalRotation[3]} or
                             {0, 180, originalRotation[3]}

    card.setPositionSmooth(newCardPosition)
    card.setRotationSmooth(cardRotation)
    card.setScale(ENCOUNTER_DECK_SCALE)
end

function onObjectLeaveZone(zone, card)
    if (supressZoneInteractions) then return end
    if (not isCard(card)) then return end

    local zoneDef = getZoneDefinition({zone = zone})
    if (not zoneDef) then return end

    local zoneType = zoneDef.zoneType or zoneDef.zoneIndex
    if (not zoneType) then return end

    local cardData = getCardData({
        card = card
    })

    local cardType = cardData.type or ""
    if (cardType == "hero" or cardType == "villain" or cardType == "main_scheme") then
        return
    end

    removeCountersFromCard({
        card = card
    })

    if(zoneDef.rescaleOnExit) then
        resizeCardOnLeaveZone(card, cardData.aspect or "")
    end

    if(zoneDef.repositionCards) then
        repositionCardsInZone({
            zone = zone
        })
    end
log(zoneType)
    if (zoneType == "victoryDisplay") then
        updateVictoryDisplayDetails()
    end
end

function resizeCardOnLeaveZone(card, cardAspect)
    if (card.isDestroyed()) then return end

    local zones = card.getZones()

    for _, zone in ipairs(zones) do
        local zoneDef = getZoneDefinition({zone = zone})
        if (zoneDef and zoneDef.rescaleOnEnterTo) then
            return
        end
    end

    if (cardAspect == "encounter") then
        card.setScale(CARD_SCALE_ENCOUNTER)
    else
        card.setScale(CARD_SCALE_PLAYER)
    end
end

function onPlayerAction(player, action, targets)
    if (action == Player.Action.Delete) then
        for _, target in ipairs(targets) do
            if not target.getVar("preventDeletion") then
                target.destroy()
            end
        end

        return false
    end

    if (action == Player.Action.PickUp) then
        if (#targets > 1) then
            return true
        end
        local card = targets[1]

        if (not isCard(card)) then
            return true
        end

        if (not isFaceUp({
            object = card
        })) then
            return true
        end

        local zones = card.getZones()
        if #zones > 0 then
            return true
        end

        local cardType = getCardProperty({
            card = card,
            property = "type"
        }) or ""
        local zoneType = nil

        if (string.sub(cardType, -11) == "side_scheme") then
            zoneType = "sideScheme"
        elseif (cardType == "attachment") then
            zoneType = "attachment"
        elseif (cardType == "environment") then
            zoneType = "environment"
        elseif (cardType == "minion") then
            zoneType = "minion"
        end

        if (not zoneType) then
            return true
        end

        local scenarioManager = getObjectFromGUID(GUID_SCENARIO_MANAGER)
        local zoneDefs = scenarioManager.call("getZoneDefsByType", {
            zoneType = zoneType
        })

        for _, zoneDef in ipairs(zoneDefs) do
            local pingPosition = getNewZoneCardPosition({
                zoneIndex = zoneDef.zoneIndex,
                forNextCard = true
            })

            if (pingPosition) then
                player.pingTable(pingPosition)
            end
        end
    end

    return true
end

function onObjectDestroy(object)
    if (not isCard(object)) then return end

    setCardValue({cardGuid = object.getGUID(), property = "retainedValue", value = nil})
end

function onObjectRotate(object, spin, flip, player_color, old_spin, old_flip)
    if (not isCard(object)) then return end
    if (spin == old_spin) then return end

    rotateCountersWithCard({card = object, spin = spin, oldSpin = old_spin})
end