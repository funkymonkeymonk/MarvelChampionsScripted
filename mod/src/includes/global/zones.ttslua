supressZoneInteractions = false

function supressZones()
   supressZoneInteractions = true

   Wait.time(function()
      supressZoneInteractions = false
   end, 3)
end

function repositionCardsInZone(params)
   local zone = params.zone
   local zoneDef = getZoneDefinition({zone = zone})
   local zoneType = zoneDef.zoneType or zoneDef.zoneIndex
 
   local items = zone.getObjects()
   local cardNumber = 0
 
   for i, v in ipairs(items) do
      if(v.tag == "Card") then
         cardNumber = cardNumber + 1
         local origCardPosition = Vector(v.getPosition())
         local newCardPosition = Vector(getZoneCardPosition({zoneDef = zoneDef, cardNumber = cardNumber}))
 
         if(newCardPosition == origCardPosition) then goto continue end
 
         local itemsOnCard = getItemsOnCard({card = v})
         local itemsToReposition = {}
         local cardGuid = v.getGUID()

         for i, item in ipairs(itemsOnCard) do
            if(item.interactable) then
               if(item.tag == "Tile" or (item.tag == "Card" and item.getGUID() ~= cardGuid)) then
                  local origItemPosition = item.getPosition()
                  local itemOffset = origCardPosition - origItemPosition
                  local newItemPosition = newCardPosition - itemOffset   
                  table.insert(itemsToReposition, {item = item, newPosition = newItemPosition})
               end
            end
         end
 
         if(newCardPosition) then
            v.setPositionSmooth(newCardPosition, false, false)

            for i, item in ipairs(itemsToReposition) do
               item.item.setPositionSmooth(item.newPosition, false, false)
            end
         end
      end
      ::continue::
   end
end

function getZoneDefinition(params)
   local scenarioManager = getObjectFromGUID(GUID_SCENARIO_MANAGER)
   if(not scenarioManager) then return end
   
   return scenarioManager.call("getZoneDefinition", params)
end
 
function getZoneCardCount(params)
   local zoneIndex = params.zoneIndex
   local zoneDef = getZoneDefinition({zoneIndex = zoneIndex})
   if(not zoneDef) then return {0,1,0} end

   local zone = getObjectFromGUID(zoneDef.guid)

   if(not zone) then return nil end

   local items = zone.getObjects()
   local cardCount = 0

   for i, v in ipairs(items) do
      if(v.tag == "Card") then cardCount = cardCount + 1 end
   end
   --TODO: Filter out cards of the wrong type
 
   return cardCount
 end
 
function getNewZoneCardPosition(params)
   local zoneDef = getZoneDefinition({zoneIndex = params.zoneIndex})

   if(not zoneDef) then return nil end

   local cardNumber = getZoneCardCount({zoneIndex = params.zoneIndex})

   if(cardNumber == nil) then return nil end

   if(params.forNextCard) then cardNumber = cardNumber + 1 end

   return getZoneCardPosition({zoneDef = zoneDef, cardNumber = cardNumber})
 end
 
 function getZoneCardPosition(params)
    local zoneDef = params.zoneDef
    local cardNumber = params.cardNumber
 
    if(not zoneDef) then return nil end
 
    local origin = Vector(zoneDef.firstCardPosition)
    local horizontalGap = zoneDef.horizontalGap or 0
    local verticalGap = zoneDef.verticalGap or 0
    local layoutDirection = zoneDef.layoutDirection or "horizontal"
    local width = zoneDef.width
    local height = zoneDef.height
 
    local column = 0
    local row = 0
 
    if(layoutDirection == "horizontal") then
       if(cardNumber % width == 0) then
          column = width
          row = cardNumber / width
       else
          column = cardNumber % width
          row = math.floor(cardNumber / width) + 1
       end
    else
       if(cardNumber % height == 0) then
          column = cardNumber / height
          row = height
       else
          column = math.floor(cardNumber / height) + 1
          row = cardNumber % height
       end
    end
 
    local x = origin.x + horizontalGap * (column - 1) --XXX error
    local z = origin.z - verticalGap * (row - 1)
 
    return {x, origin.y, z}
 end
 
function updateVictoryDisplayDetails()
   local scenarioManager = getObjectFromGUID(GUID_SCENARIO_MANAGER)
   if(not scenarioManager) then return nil end

   local zoneDef = scenarioManager.call("getZoneDefinition", {zoneIndex = "victoryDisplay"})
   if(not zoneDef) then return nil end

   local zone = getObjectFromGUID(zoneDef.guid)
   if(not zone) then return nil end
 
   local items = zone.getObjects()
   local cardCount = 0
   local victoryPoints = 0
 
   for i, v in ipairs(items) do
      if(v.tag == "Card") then 
         cardCount = cardCount + 1
 
         local cardData = getCardData({card = v})
         victoryPoints = victoryPoints + (cardData.victory or 0)
      end
   end
 
   local victoryPointsReadout = scenarioManager.call("getItemFromManifest", {key = "victoryPointsReadout"})
   local victoryDisplayItemCountReadout = scenarioManager.call("getItemFromManifest", {key = "victoryDisplayItemCountReadout"})
 
   victoryPointsReadout.TextTool.setValue("Victory Points: " .. victoryPoints)
   victoryDisplayItemCountReadout.TextTool.setValue("Items: " .. cardCount)
end