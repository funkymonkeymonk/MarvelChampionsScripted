function getAccelerationCounter(params)
    local createIfNotFound = params.createIfNotFound or false
    local overridePosition = params.overridePosition or nil
    local allObjects = getAllObjects()

    for _, obj in ipairs(allObjects) do
        if obj.hasTag("counter") and obj.hasTag("acceleration") then
            return obj
        end
    end

    if(not createIfNotFound) then
        return nil
    end

    local accelerationCounterPosition = overridePosition

    if(accelerationCounterPosition == nil) then
        local mainSchemeThreatCounter = getMainSchemeThreatCounter()

        if(mainSchemeThreatCounter == nil) then
            broadcastToAll("No main scheme threat counter found. Cannot create acceleration token.", {1, 0, 0})
            return nil
        end
    
        local threatCounterPosition = mainSchemeThreatCounter.getPosition()
        accelerationCounterPosition = threatCounterPosition + Vector(2.5, 0, 2.5)    
    end

    local accelerationCounterBag = getObjectFromGUID(Global.getVar("GUID_ACCELERATION_COUNTER_BAG"))
    local accelerationCounter = accelerationCounterBag.takeObject(
        {
            position = accelerationCounterPosition, 
            smooth = false,
            callback_function=function(obj)
                obj.setScale({0.5, 1.00, 0.5})
                obj.setLock(true)
            end
        })

    return accelerationCounter
end

function getMainSchemeThreatCounter(params)
    local allObjects = getAllObjects()

    for _, obj in ipairs(allObjects) do
        --TODO: this assumes that there will only be one main scheme threat counter; need to make it more robust
        if obj.hasTag("counter") and obj.hasTag("threat") and obj.hasTag("main-scheme") then
            return obj
        end
    end

    return nil
end

function getCounterFromCard(params)
    local card = params.card
    local counterGuid = card.getVar("counterGuid")
    local counter = counterGuid and getObjectFromGUID(counterGuid) or nil

    return counter
end

function removeCounterFromCard(params)
    local card = params.card
    local counterGuid = card.getVar("counterGuid")
    local counter = counterGuid and getObjectFromGUID(counterGuid) or nil

    if(counter) then 
      local value = counter.call("getValue")
      card.setVar("retainedValue", value)

      counter.destruct()
    end

    card.setVar("counterGuid", nil)
end

function addThreatCounterToSideScheme(card)
    local threatCounterBag = getObjectFromGUID(GUID_THREAT_COUNTER_BAG)
    local cardPosition = card.getPosition()
    local counterPosition = {cardPosition[1] - 0.76, cardPosition[2] + 0.07, cardPosition[3] - 1.08}
    local threatCounter = threatCounterBag.takeObject({position = counterPosition, smooth = false})
    card.setVar("counterGuid", threatCounter.getGUID())
    
    local threat = 0
    local retainedValue = card.getVar("retainedValue")
    if(retainedValue) then
       threat = retainedValue
    else
       --TODO: Extract this calculation into a function?
       local cardData = getCardData({card = card})
       local baseThreat = cardData.baseThreat and tonumber(cardData.baseThreat) or 0
       local baseThreatIsFixed = cardData.baseThreatIsFixed == "true"
       local hinder = cardData.hinder and tonumber(cardData.hinder) or 0
       local heroManager = getObjectFromGUID(GUID_HERO_MANAGER)
       local heroCount = heroManager.call("getHeroCount")
 
       if baseThreatIsFixed then
          threat = baseThreat + (heroCount * hinder)
       else
          threat = baseThreat * heroCount
       end   
    end
  
    Wait.frames(
       function()
          threatCounter.setScale({0.75, 1.00, 0.75})
          threatCounter.call("setValue", {value = threat})
      end,
      1
    ) 
end
 
function addGeneralCounterToCard(card, cardData) 
    if(card.getVar("counterGuid")) then return end
    if (not cardData) then cardData = getCardData({card = card}) end
 
    local counterBag = getObjectFromGUID(GUID_GENERAL_COUNTER_BAG)
    local cardPosition = card.getPosition()
    local counterPosition = {cardPosition[1] + 1.30, cardPosition[2] + 0.10, cardPosition[3] + 0.70}
    local counter = counterBag.takeObject({position = counterPosition, smooth = false})
    card.setVar("counterGuid", counter.getGUID())
    
    local value = 0
    local retainedValue = card.getVar("retainedValue")
    if(retainedValue) then
       value = retainedValue
    else
       --TODO: Extract this calculation into a function?
       local baseValue = cardData.counterValue and tonumber(cardData.counterValue) or 0
       local valuePerHero = cardData.counterValuePerHero and tonumber(cardData.counterValuePerHero) or 0
       local heroManager = getObjectFromGUID(GUID_HERO_MANAGER)
       local heroCount = heroManager.call("getHeroCount")
       value = baseValue + (heroCount * valuePerHero)   
    end
  
    Wait.frames(
       function()
          counter.setScale({0.45, 1.00, 0.45})
          counter.setName(cardData.counterName or "")
          counter.call("setValue", {value = value})
      end,
      1
    )    
end
 
function addThreatCounterToCard(card, cardData)
    local counterGuid = card.getVar("counterGuid")
    if(counterGuid and getObjectFromGUID(counterGuid)) then return end
 
    if (not cardData) then cardData = getCardData({card = card}) end
 
    local counterBag = getObjectFromGUID(GUID_THREAT_COUNTER_BAG)
    local cardPosition = card.getPosition()
    local counterPosition = {cardPosition[1] + 1.30, cardPosition[2] + 0.10, cardPosition[3] + 0.70}
    local counter = counterBag.takeObject({position = counterPosition, smooth = false})
    card.setVar("counterGuid", counter.getGUID())
    
    local value = 0
    local retainedValue = card.getVar("retainedValue")

    if(retainedValue) then
       value = retainedValue
    else
       --TODO: Extract this calculation into a function?
       local baseValue = cardData.counterValue and tonumber(cardData.counterValue) or 0
       local valuePerHero = cardData.counterValuePerHero and tonumber(cardData.counterValuePerHero) or 0
       local heroManager = getObjectFromGUID(GUID_HERO_MANAGER)
       local heroCount = heroManager.call("getHeroCount")
       value = baseValue + (heroCount * valuePerHero)
    end
  
    Wait.frames(
       function()
          counter.setScale({0.56, 1.00, 0.56})
          counter.setName(cardData.counterName or "")
          counter.call("setValue", {value = value})
      end,
      1
    )    
end

function addHealthCounterToMinion(card)
    local healthCounterBag = getObjectFromGUID(GUID_HEALTH_COUNTER_BAG)
    local yOffset = - 0.3 + (card.getVar("counterOffset") or 0)
 
    local cardPosition = card.getPosition()
    local counterPosition = {cardPosition[1] + 1.55, cardPosition[2] + 0.07, cardPosition[3] + yOffset}
    local healthCounter = healthCounterBag.takeObject({position = counterPosition, smooth = false})
    card.setVar("counterGuid", healthCounter.getGUID())
    
    --TODO: Extract this calculation into a function?
    local cardData = getCardData({card = card})
    local health = 0
    local retainedValue = card.getVar("retainedValue")
 
    if(retainedValue) then
       health = retainedValue
    else
       if(cardData.healthPerHero) then
          local heroManager = getObjectFromGUID(GUID_HERO_MANAGER)
          local heroCount = heroManager.call("getHeroCount")
          health = cardData.health * heroCount
       else
          health = cardData.health
       end         
    end
  
    Wait.frames(
       function()
          healthCounter.setScale({0.31, 1.00, 0.31})
          healthCounter.call("setValue", {value = health})
      end,
      1
    ) 
end

function addConfiguredCounterToCard(params)
  local card = params.card
  local cardData = params.cardData or getCardData({card = card})

  if(not cardData or not cardData.counter) then
    return
  end

  addCounterToCard({card = card, counterType = cardData.counter, counterName = cardData.counterName})
end

function addCounterToCard(params)
  local card = params.card
  local counterType = params.counterType
  local counterName = params.counterName or ""
  local counterBag
  local baseScale
  local baseOffset

  if(counterType == "threat") then
      counterBag = getObjectFromGUID(GUID_THREAT_COUNTER_BAG)
  elseif(counterType == "general") then
      counterBag = getObjectFromGUID(GUID_GENERAL_COUNTER_BAG)
      baseScale = {0.25, 1.00, 0.25}
      baseOffset = {0.78, 0.10, 0.42}
  elseif(counterType == "health") then
      counterBag = getObjectFromGUID(GUID_HEALTH_COUNTER_BAG)
  end

  local playerCardScale = Global.getTable("CARD_SCALE_PLAYER")
  local cardScale = card.getScale()
  local scaleFactor = cardScale[1] / playerCardScale[1]
  local counterScale = Vector({baseScale[1] * scaleFactor, baseScale[2], baseScale[3] * scaleFactor})
  local offset = Vector({baseOffset[1] * scaleFactor, baseOffset[2], baseOffset[3] * scaleFactor})
  local cardPosition = card.getPosition()
  local counterPosition = Vector({cardPosition[1] + offset[1], cardPosition[2] + offset[2], cardPosition[3] + offset[3]})
  
  local counter = counterBag.takeObject(
    {
      position = counterPosition, 
      smooth = false,
      callback_function=function(obj)
          obj.setScale(counterScale)
          obj.setName(counterName)
      end
    })

  card.setVar("counterGuid", counter.getGUID())
end

function addStatusToVillain(params)
    local villain = params.villain
    local statusType = params.statusType
    local villainCard = getObjectFromGUID(villain.cardGuid)
  log(villainCard)
    if not cardCanHaveStatus({card = villainCard, statusType = statusType}) then
      return
    end
  
    placeStatusToken({card = villainCard, statusType = statusType})
end
  
function addStatusToMinion(params)
    local minionCard = params.card
    local statusType = params.statusType
  
    if not cardCanHaveStatus({card = minionCard, statusType = statusType}) then
      return
    end
  
    placeStatusToken({card = minionCard, statusType = statusType})
end

function addStatusToAllHeroes(params)
    local statusType = params.statusType
    local heroManager = getObjectFromGUID(GUID_HERO_MANAGER)
    local heroes = heroManager.call("getSelectedHeroes")
  
    for color, _ in pairs(heroes) do
      addStatusToHero({playerColor = color, statusType = statusType})
    end
end

function addStatusToHero(params)
    local playerColor = params.playerColor
    local statusType = params.statusType
    local heroManager = getObjectFromGUID(GUID_HERO_MANAGER)
    local hero = heroManager.call("getHeroByPlayerColor", {playerColor = playerColor})
    local heroCard = getObjectFromGUID(hero.identityGuid)
  
    if not cardCanHaveStatus({card = heroCard, statusType = statusType}) then
      return
    end
  
    placeStatusToken({card = heroCard, statusType = statusType, playerColor = playerColor})
end

function cardCanHaveStatus(params)
    local card = params.card
    local cardPosition = card.getPosition()
    local cardName = card.getName()
    local targetType = Global.call("getCardProperty", {card = card, property = "type"})
    local statusType = params.statusType
  
    statusCount = getStatusCount({card = card, statusType = statusType})
  
    local playerColor = card.getVar("playerColor")
    local messageType = playerColor and MESSAGE_TYPE_PLAYER or MESSAGE_TYPE_INFO
 
    if(statusType == "tough") then
      local maxToughCount = (targetType == "hero" and cardName == "Colossus") and 2 or 1
      if(statusCount >= maxToughCount) then
        displayMessage({message = cardName .. " is already tough.", messageType = messageType, playerColor = playerColor})
        return false
      end
    else
      if(card.hasTag("stalwart")) then
        displayMessage({message = cardName .. " is stalwart and cannot be " .. statusType .. ".", messageType = messageType, playerColor = playerColor})
        return false
      end
      
      local maxStatusCount = card.hasTag("steady") and 2 or 1
  
      if(statusCount >= maxStatusCount) then
        displayMessage({message = cardName .. " is already " .. statusType .. ".\n(If there is an effect in play that makes this character steady, please give them a second " .. statusType .. " card manually.)", messageType = messageType, playerColor = playerColor})
        return false
      end
    end
  
    return true
end

function getStatusCount(params)
    local card = params.card
    local statusType = params.statusType
    local items = getItemsOnCard({card = card})
    local statusCount = 0
 
    for _, item in ipairs(items) do
       if item.hasTag(statusType.."-status") then
         statusCount = statusCount + 1
       end
    end
 
    return statusCount
end
  
function placeStatusToken(params)
    local card = params.card
    local statusPosition = Vector(card.getPosition())
    statusPosition.y = statusPosition.y + 1
    local targetType = Global.call("getCardProperty", {card = card, property = "type"})
    local statusType = params.statusType
  
    local statusBagGuid = ""
 
    --TODO: Use constants for status bag guids
    --TODO: Use one status bag for all target types, but change the scale appropriately
    if(targetType == "villain") then
      statusBagGuid = statusType == "tough" and "35b809"
        or statusType == "stunned" and "882e12"
        or statusType == "confused" and "50c501"
    else
      statusBagGuid = statusType == "tough" and "53a9f2"
        or statusType == "stunned" and "c46ad4"
        or statusType == "confused" and "0b8743"
    end
  
    local statusBag = getObjectFromGUID(statusBagGuid)
    local statusToken = statusBag.takeObject({position = statusPosition, smooth = false})
  
    local message = card.getName() .. " is " .. statusType .. "!"
  
    if(statusType == "stunned" or statusType == "confused") then
      message = message .. "\n(If there is an effect in play that makes this character steady, they may need another status card to actually be " .. statusType .. ".\nIf they are stalwart, you may need to remove this status card.)"
    end
  
    local playerColor = params.playerColor or card.getVar("playerColor")
    local messageType = playerColor and MESSAGE_TYPE_PLAYER or MESSAGE_TYPE_INFO
 
    displayMessage({message = message, messageType = messageType, playerColor = playerColor})
end