Cardplacer = {}
local CARDPOOL_BY_PACK_ID = {}
local baseUrl = "https://d2xdqryaauvaie.cloudfront.net"

CARD_ID = 0

function setCardID(_, value, _)
    CARD_ID = value
end

function random_guid()
  local value = math.random(0, 2^24)
  return string.format('%x', value)
end

function mapCardData(cardData)
    local card = {}

    for k,v in pairs(cardData) do
        if(k~="FrontURL" and k~="FrontURL_mutant" and k~="FrontURL_shield" and k~="BackURL" and k~="flavor" and k~="text" and k~="backText" and k~="steady" and k~="stalwart" and k~="toughness") then
            if(k=="code") then
                card[k] = string.sub(tostring(v), 1, 5)
            else
                card[k] = string.gsub(tostring(v), "\"", "\\\"")
            end
        end
    end

    local cardjson = json.encode(card)

    return cardjson
end

function getCardTypeSuffix(type)
    if(type == "event") then
        return " - Event"
    elseif(type == "resource") then
        return " - Resource"
    elseif(type == "support") then
        return " - Support"
    elseif(type == "upgrade") then
        return " - Upgrade"
    elseif(type == "ally") then
        return " - Ally"
    elseif(type == "player_side_scheme") then
        return " - Player Side Scheme"
    elseif(type == "side_scheme") then
        return " - Side Scheme"
    elseif(type == "environment") then
        return " - Environment"
    elseif(type == "treachery") then
        return " - Treachery"
    elseif(type == "minion") then
        return " - Minion"
    elseif(type == "obligation") then
        return " - Obligation"
    elseif(type == "attachment") then
        return " - Attachment"
    end

    return ""
end

-- Fix card pool to deal with duplicates
function buildCardPool(packId)
    if(not packId) then return {} end

    if (CARDPOOL_BY_PACK_ID[packId] ~= nil) then
        return CARDPOOL_BY_PACK_ID[packId]
    end

    local cardpool = {}
    local CARDPOOL_OBJ = getObjectFromGUID('843931')
    local CARDPOOL_JSON = CARDPOOL_OBJ.getVar('PACK_' .. packId)

    if(CARDPOOL_JSON == nil) then
        log("Pack "..packId.." has not been added to the card pool.")
        return nil;
    end
    
    local CARDPOOL_DATA = json.decode(CARDPOOL_JSON)

    for _, cardData in pairs(CARDPOOL_DATA) do
        if (cardData.duplicate_of == nil) then
            local cardFace = baseUrl .. cardData.FrontURL
            local cardBack = baseUrl .. cardData.BackURL
            local cardAsset = Decker.Asset(cardFace, cardBack)
            local sideways = string.sub(cardData.type, -6, -1) == "scheme"
            local tags={cardData.type}

            if(cardData.steady) then table.insert(tags, "steady") end
            if(cardData.stalwart) then table.insert(tags, "stalwart") end
            if(cardData.toughness) then table.insert(tags, "toughness") end

            local gmNotes = mapCardData(cardData)

            local cardName = cardData.name .. getCardTypeSuffix(cardData.type)

            local card = Decker.Card(cardAsset, 1, 1, { guid=random_guid(), name=cardName, sideways=sideways, tags=tags, GMNotes=gmNotes })
            
            if(cardData.linked) then
                card.linked = cardData.linked
            end

            cardpool[cardData.code] = card

            if(cardData.FrontURL_mutant) then
                local mutantCardAsset = Decker.Asset(baseUrl .. cardData.FrontURL_mutant, baseUrl .. cardData.BackURL)
                local mutantCard = Decker.Card(mutantCardAsset, 1, 1, { guid=random_guid(), name=cardName, sideways=sideways, tags=tags, GMNotes=gmNotes })
                cardpool[cardData.code.."_mutant"] = mutantCard
            end

            if(cardData.FrontURL_shield) then
                local shieldCardAsset = Decker.Asset(baseUrl .. cardData.FrontURL_shield, baseUrl .. cardData.BackURL)
                local shieldCard = Decker.Card(shieldCardAsset, 1, 1, { guid=random_guid(), name=cardName, sideways=sideways, tags=tags, GMNotes=gmNotes })
                cardpool[cardData.code.."_shield"] = shieldCard
            end
        else
            cardpool[cardData.code] = {duplicate_of = cardData.duplicate_of}
        end
    end
    
    CARDPOOL_BY_PACK_ID[packId] = cardpool
    return cardpool
end

function getCardFromCardPool(cardId, artVariant)
    local packId = string.sub(cardId, 1,2)
    local cardpool = buildCardPool(packId)

    if(cardpool == nil) then return nil end

    local card = artVariant ~= nil and cardpool[cardId.."_"..artVariant] or cardpool[cardId]

    --Temporary work-around for cardpool issue
    if(card == nil) then card = getCardFromCardPool(cardId.."a") end

    return card
end

function getCard(player)
    local position = player.getPointerPosition()
    local cardId = CARD_ID
    local FACE_UP_ROTATION = {0, 180, 0}
    local FACE_DOWN_ROTATION = {0, 180, 180}
    local card = getCardFromCardPool(cardId)
    if (card.duplicate_of == nil) then
        card:spawn({position = position, rotation = FACE_UP_ROTATION})
        clearUI()
    else
        CARD_ID = card.duplicate_of
        getCard(player)
    end
end

function spawnCard(params)
    local cardId = params.cardId
    local position = params.position
    local scale = params.scale or Global.getTable("CARD_SCALE_PLAYER")
    local name = params.name or ""
    local landscape = params.landscape or false
    local locked = params.locked
    local artVariant = params.artVariant
    local tags = params.tags or {}

    local x = 0
    local y = 180
    local z = 0

    if (landscape) then y = 90 end
    if (params.flipped) then z = 180 end

    -- Default face up
    local rotation = {x, y, z}

    local card = getCardFromCardPool(cardId, artVariant)

    if (card.duplicate_of ~= nil) then
        return spawnCard({
            cardId = card.duplicate_of,
            position = position,
            scale = scale,
            name = name,
            landscape = landscape,
            locked = locked,
            artVariant = artVariant,
            tags = tags
        })
    end

    addTagsToCard(card, tags)

    local spawnedCard = 
        card:spawn({position = position, scale = scale, rotation = rotation, name = name})

    if(locked) then
        Wait.frames(
            function()
                Wait.condition(
                    function()
                        if(spawnedCard.isDestroyed()) then return end
                        spawnedCard.setLock(true)
                    end, 
                    function()
                        return spawnedCard.isDestroyed() or spawnedCard.resting
                    end,
                    15)
            end,
            10)
    end

    clearUI()

    return spawnedCard
end

function addTagsToCard(card, tags)
    for _, tag in ipairs(tags) do
        table.insert(card.data.Tags, tag)
    end
end

function spawnDeck(params)
    local cards = params.cards
    local position = Vector(params.position)
    local landscape = params.landscape or false
    local flipped = params.flipped or false
    local scale = params.scale or Global.getTable("CARD_SCALE_PLAYER")
    local name = params.name or ""
    local linkedCards = {}
    local y = landscape and 90 or 180
    local z = flipped and 0 or 180
    local cardTags = params.cardTags or {}
    local artVariant = params.artVariant
    local rotation = {0, y, z}

    deck = {}
    for cardId,number in pairs(cards) do
        for i = 1, number, 1 do
            local card = getCardFromCardPool(cardId, artVariant)
            
            if(card.linked) then
                for linkedCardId in string.gmatch(card.linked, "([^,]+)") do
                    if(linkedCards[linkedCardId] == nil) then
                        linkedCards[linkedCardId] = 1
                    else
                        linkedCards[linkedCardId] = linkedCards[linkedCardId] + 1
                    end
                end
            end

            if (card.duplicate_of == nil) then
                addTagsToCard(card, cardTags)
                table.insert(deck, card)
            else
                table.insert(deck, getCardFromCardPool(card.duplicate_of, artVariant))
            end
        end
    end

    local linkedCardList = ""

    for cardId,number in pairs(linkedCards) do
        linkedCardList = linkedCardList .. cardId .. ","

        if(cards[cardId] == nil) then
            for i = 1, number, 1 do
                local card = getCardFromCardPool(cardId, artVariant)

                if (card.duplicate_of == nil) then
                    addTagsToCard(card, cardTags)
                    table.insert(deck, card)
                else
                    table.insert(deck, getCardFromCardPool(card.duplicate_of, artVariant))
                end
            end
        end
    end

    newDeck = Decker.Deck(deck, {name = name, GMNotes = linkedCardList})

    return newDeck:spawn({position = position, scale = scale, rotation = rotation, name = name})
end

function createUI(_, menu_position)
    local xml = [[
<Panel width="250" height="150">
    <VerticalLayout childAlignment="UpperCenter" color="#CCCCCC" outline="#000000">
        <Text>Type in a card id</Text>
        <Text color="#444444">ex 01006 will spawn Aunt May.</Text>
        <InputField id="INPUT_CARD_ID" onValueChanged="setCardID"></InputField>
        <Button onClick="getCard">Spawn Card</Button>
    </VerticalLayout>
</Panel>
]]
    UI.setXml(xml)
end

function clearUI()
    UI.setXml("")
end